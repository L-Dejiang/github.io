<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>L-dejiang</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-05T14:01:41.612Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>L-dejiang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Php数据类型</title>
    <link href="http://yoursite.com/2017/11/05/Php%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2017/11/05/Php数据类型/</id>
    <published>2017-11-05T13:21:12.000Z</published>
    <updated>2017-11-05T14:01:41.612Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初学PHP5大数据类型"><a href="#初学PHP5大数据类型" class="headerlink" title="初学PHP5大数据类型"></a>初学PHP5大数据类型</h2><h4 id="PHP-字符串"><a href="#PHP-字符串" class="headerlink" title="PHP 字符串"></a>PHP 字符串</h4><h6 id="一个字符串是一串字符的序列，就像-“Hello-world-”。"><a href="#一个字符串是一串字符的序列，就像-“Hello-world-”。" class="headerlink" title="一个字符串是一串字符的序列，就像 “Hello world!”。"></a>一个字符串是一串字符的序列，就像 “Hello world!”。</h6><p>你可以将任何文本放在单引号和双引号中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?php </div><div class="line">$x = &quot;Hello world!&quot;;//定义一个变量</div><div class="line">echo $x; //输出这个变量的值</div><div class="line">echo &quot;&lt;br&gt;&quot;; </div><div class="line">$x = &apos;Hello world!&apos;; //使用单引号或者双引号都可以</div><div class="line">echo $x;</div><div class="line">?&gt;</div></pre></td></tr></table></figure><h5 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h5><h6 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world!"></a>Hello world!</h6><h6 id="Hello-world-1"><a href="#Hello-world-1" class="headerlink" title="Hello world!"></a>Hello world!</h6><hr><h4 id="PHP-整型"><a href="#PHP-整型" class="headerlink" title="PHP 整型"></a>PHP 整型</h4><p>整数是一个没有小数的数字。</p><h6 id="整数规则"><a href="#整数规则" class="headerlink" title="整数规则:"></a>整数规则:</h6><ol><li>整数必须至少有一个数字 (0-9)</li><li>整数不能包含逗号或空格</li><li>整数是没有小数点的</li><li>整数可以是正数或负数</li><li>整型可以用三种格式来指定：十进制， 十六进制（ 以 0x 为前缀）或八进制（前缀为 0）。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">//我们可以使用var_dump()来打印结果</div><div class="line">//PHP var_dump()函数返回变量的数据类型和值</div><div class="line">//相当于js中的console.log()</div><div class="line">&lt;?php </div><div class="line">$x = 5985;</div><div class="line">var_dump($x);</div><div class="line">echo &quot;&lt;br&gt;&quot;; </div><div class="line">$x = -345; // 负数 </div><div class="line">var_dump($x);</div><div class="line">echo &quot;&lt;br&gt;&quot;; </div><div class="line">$x = 0x8C; // 十六进制数</div><div class="line">var_dump($x);</div><div class="line">echo &quot;&lt;br&gt;&quot;;</div><div class="line">$x = 047; // 八进制数</div><div class="line">var_dump($x);</div><div class="line">?&gt;</div></pre></td></tr></table></figure><h5 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h5><h6 id="int-5985"><a href="#int-5985" class="headerlink" title="int(5985)"></a>int(5985)</h6><h6 id="int-345"><a href="#int-345" class="headerlink" title="int(-345)"></a>int(-345)</h6><h6 id="int-140"><a href="#int-140" class="headerlink" title="int(140)"></a>int(140)</h6><h6 id="int-39"><a href="#int-39" class="headerlink" title="int(39)"></a>int(39)</h6><hr><h4 id="PHP-浮点型"><a href="#PHP-浮点型" class="headerlink" title="PHP 浮点型"></a>PHP 浮点型</h4><p>浮点数是带小数部分的数字，或是指数形式。<br>在以下实例中我们将测试不同的数字。 PHP var_dump() 函数返回变量的数据类型和值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?php </div><div class="line">$x = 10.365;</div><div class="line">var_dump($x);</div><div class="line">echo &quot;&lt;br&gt;&quot;; </div><div class="line">$x = 2.4e3;</div><div class="line">var_dump($x);</div><div class="line">echo &quot;&lt;br&gt;&quot;; </div><div class="line">$x = 8E-5;</div><div class="line">var_dump($x);</div><div class="line">?&gt;</div></pre></td></tr></table></figure><h5 id="结果：-1"><a href="#结果：-1" class="headerlink" title="结果："></a>结果：</h5><h6 id="float-10-365"><a href="#float-10-365" class="headerlink" title="float(10.365)"></a>float(10.365)</h6><h6 id="float-2400"><a href="#float-2400" class="headerlink" title="float(2400)"></a>float(2400)</h6><h6 id="float-8-0E-5"><a href="#float-8-0E-5" class="headerlink" title="float(8.0E-5)"></a>float(8.0E-5)</h6><hr><h4 id="PHP-布尔型"><a href="#PHP-布尔型" class="headerlink" title="PHP 布尔型"></a>PHP 布尔型</h4><p>布尔型可以是 TRUE 或 FALSE。php有些跟js中的数据类型差不多</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?php </div><div class="line">$cars=array(&quot;Volvo&quot;,&quot;BMW&quot;,&quot;Toyota&quot;);</div><div class="line">var_dump($cars);</div><div class="line">?&gt;</div></pre></td></tr></table></figure><h5 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h5><h6 id="array-3-数组长度（length）为3"><a href="#array-3-数组长度（length）为3" class="headerlink" title="array(3) {   数组长度（length）为3"></a>array(3) {   数组长度（length）为3</h6><h6 id="0-gt-string-5-“Volvo”-数组的索引从0开始"><a href="#0-gt-string-5-“Volvo”-数组的索引从0开始" class="headerlink" title="[0]=&gt; string(5) “Volvo” 数组的索引从0开始"></a>[0]=&gt; string(5) “Volvo” 数组的索引从0开始</h6><h6 id="1-gt-string-3-“BMW”"><a href="#1-gt-string-3-“BMW”" class="headerlink" title="[1]=&gt; string(3) “BMW”"></a>[1]=&gt; string(3) “BMW”</h6><h6 id="2-gt-string-6-“Toyota”"><a href="#2-gt-string-6-“Toyota”" class="headerlink" title="[2]=&gt; string(6) “Toyota”"></a>[2]=&gt; string(6) “Toyota”</h6><h6 id=""><a href="#" class="headerlink" title="}"></a>}</h6><hr><h4 id="PHP-对象"><a href="#PHP-对象" class="headerlink" title="PHP 对象"></a>PHP 对象</h4><p>对象数据类型也可以用于存储数据。<br>在 PHP 中，对象必须声明。<br>首先，你必须使用class关键字声明类对象。类是可以包含属性和方法的结构。<br>然后我们在类中定义数据类型，然后在实例化的类中使用数据类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">class Car</div><div class="line">&#123;</div><div class="line">    var $color; //定义变量</div><div class="line">    function Car($color=&quot;green&quot;) &#123;  //传参</div><div class="line">      $this-&gt;color = $color;  //以上实例中PHP关键字this就是指向当前对象实例的指针，不指向任何其他对象或类。</div><div class="line">    &#125;</div><div class="line">    function what_color() &#123;</div><div class="line">      return $this-&gt;color; //return 返回值</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">//foreach 遍历一个数组 get_object_vars返回一个数组， 获取$obj对象中的属性组成一个数组</div><div class="line">function print_vars($obj) &#123;</div><div class="line">   foreach (get_object_vars($obj) as $prop =&gt; $val) &#123;</div><div class="line">     echo &quot;\t$prop = $val\n&quot;;//将&quot;\t属性名 = 属性值\n&quot;输出到网页（\t是文本缩进，\n是文本换行，它们都是空白符，html在解析时表现为一个空格）</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// instantiate one object</div><div class="line">$herbie = new Car(&quot;white&quot;); //实例化这个对象</div><div class="line"></div><div class="line">// show herbie properties</div><div class="line">echo &quot;\herbie: Properties\n&quot;;</div><div class="line">print_vars($herbie);//调用输出对象中所有属性和对应属性值的方法，传入汽车对象</div><div class="line"></div><div class="line">?&gt;</div></pre></td></tr></table></figure><h5 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h5><h6 id="herbie-Properties-color-white"><a href="#herbie-Properties-color-white" class="headerlink" title="\herbie: Properties color = white"></a>\herbie: Properties color = white</h6><hr><h4 id="PHP-NULL-值"><a href="#PHP-NULL-值" class="headerlink" title="PHP NULL 值"></a>PHP NULL 值</h4><p>ULL 值表示变量没有值。NULL 是数据类型为 NULL 的值。<br>NULL 值指明一个变量是否为空值。 同样可用于数据空值和NULL值的区别。<br>可以通过设置变量值为 NULL 来清空变量数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$x=&quot;Hello world!&quot;;</div><div class="line">$x=null;</div><div class="line">var_dump($x);</div><div class="line">?&gt;</div></pre></td></tr></table></figure><h5 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h5><h6 id="NULL"><a href="#NULL" class="headerlink" title="NULL"></a>NULL</h6><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;初学PHP5大数据类型&quot;&gt;&lt;a href=&quot;#初学PHP5大数据类型&quot; class=&quot;headerlink&quot; title=&quot;初学PHP5大数据类型&quot;&gt;&lt;/a&gt;初学PHP5大数据类型&lt;/h2&gt;&lt;h4 id=&quot;PHP-字符串&quot;&gt;&lt;a href=&quot;#PHP-字符串&quot; c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/10/23/hello-world/"/>
    <id>http://yoursite.com/2017/10/23/hello-world/</id>
    <published>2017-10-23T09:23:15.970Z</published>
    <updated>2017-10-23T09:23:15.970Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
